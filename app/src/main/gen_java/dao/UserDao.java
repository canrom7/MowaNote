package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import bean.User;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "user".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", false, "OBJECT_ID");
        public final static Property UserId = new Property(1, Integer.class, "userId", false, "USER_ID");
        public final static Property UserSex = new Property(2, String.class, "userSex", false, "USER_SEX");
        public final static Property UserCity = new Property(3, String.class, "userCity", false, "USER_CITY");
        public final static Property UserAge = new Property(4, Integer.class, "userAge", false, "USER_AGE");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"user\" (" + //
                "\"OBJECT_ID\" TEXT," + // 0: objectId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"USER_SEX\" TEXT," + // 2: userSex
                "\"USER_CITY\" TEXT," + // 3: userCity
                "\"USER_AGE\" INTEGER);"); // 4: userAge
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"user\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String userCity = entity.getUserCity();
        if (userCity != null) {
            stmt.bindString(4, userCity);
        }
 
        Integer userAge = entity.getUserAge();
        if (userAge != null) {
            stmt.bindLong(5, userAge);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userSex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userCity
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // userAge
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUserSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserAge(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(User entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
