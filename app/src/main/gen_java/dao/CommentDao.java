package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import bean.Comment;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "comment".
*/
public class CommentDao extends AbstractDao<Comment, Void> {

    public static final String TABLENAME = "comment";

    /**
     * Properties of entity Comment.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", false, "OBJECT_ID");
        public final static Property CommnetId = new Property(1, Integer.class, "commnetId", false, "COMMNET_ID");
        public final static Property CommentAuthor = new Property(2, String.class, "commentAuthor", false, "COMMENT_AUTHOR");
        public final static Property CommentNote = new Property(3, String.class, "commentNote", false, "COMMENT_NOTE");
        public final static Property CommentInfo = new Property(4, String.class, "commentInfo", false, "COMMENT_INFO");
        public final static Property CommentType = new Property(5, Integer.class, "commentType", false, "COMMENT_TYPE");
        public final static Property CommentState = new Property(6, Integer.class, "commentState", false, "COMMENT_STATE");
        public final static Property UpdadeAt = new Property(7, java.util.Date.class, "updadeAt", false, "UPDADE_AT");
    };


    public CommentDao(DaoConfig config) {
        super(config);
    }
    
    public CommentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"comment\" (" + //
                "\"OBJECT_ID\" TEXT," + // 0: objectId
                "\"COMMNET_ID\" INTEGER," + // 1: commnetId
                "\"COMMENT_AUTHOR\" TEXT," + // 2: commentAuthor
                "\"COMMENT_NOTE\" TEXT," + // 3: commentNote
                "\"COMMENT_INFO\" TEXT," + // 4: commentInfo
                "\"COMMENT_TYPE\" INTEGER," + // 5: commentType
                "\"COMMENT_STATE\" INTEGER," + // 6: commentState
                "\"UPDADE_AT\" INTEGER);"); // 7: updadeAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"comment\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Comment entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        Integer commnetId = entity.getCommnetId();
        if (commnetId != null) {
            stmt.bindLong(2, commnetId);
        }
 
        String commentAuthor = entity.getCommentAuthor();
        if (commentAuthor != null) {
            stmt.bindString(3, commentAuthor);
        }
 
        String commentNote = entity.getCommentNote();
        if (commentNote != null) {
            stmt.bindString(4, commentNote);
        }
 
        String commentInfo = entity.getCommentInfo();
        if (commentInfo != null) {
            stmt.bindString(5, commentInfo);
        }
 
        Integer commentType = entity.getCommentType();
        if (commentType != null) {
            stmt.bindLong(6, commentType);
        }
 
        Integer commentState = entity.getCommentState();
        if (commentState != null) {
            stmt.bindLong(7, commentState);
        }
 
        java.util.Date updadeAt = entity.getUpdadeAt();
        if (updadeAt != null) {
            stmt.bindLong(8, updadeAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Comment readEntity(Cursor cursor, int offset) {
        Comment entity = new Comment( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // commnetId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // commentAuthor
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commentNote
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commentInfo
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // commentType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // commentState
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // updadeAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Comment entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCommnetId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCommentAuthor(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommentNote(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommentInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommentType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCommentState(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUpdadeAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Comment entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Comment entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
