package dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import bean.Note;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "note".
*/
public class NoteDao extends AbstractDao<Note, Void> {

    public static final String TABLENAME = "note";

    /**
     * Properties of entity Note.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ObjectId = new Property(0, String.class, "objectId", false, "OBJECT_ID");
        public final static Property NoteId = new Property(1, Integer.class, "noteId", false, "NOTE_ID");
        public final static Property NoteAuthor = new Property(2, String.class, "noteAuthor", false, "NOTE_AUTHOR");
        public final static Property NoteTitle = new Property(3, String.class, "noteTitle", false, "NOTE_TITLE");
        public final static Property NoteInfo = new Property(4, String.class, "noteInfo", false, "NOTE_INFO");
        public final static Property NoteType = new Property(5, int.class, "noteType", false, "NOTE_TYPE");
        public final static Property EditSite = new Property(6, String.class, "editSite", false, "EDIT_SITE");
        public final static Property UpdadeAt = new Property(7, java.util.Date.class, "updadeAt", false, "UPDADE_AT");
    };


    public NoteDao(DaoConfig config) {
        super(config);
    }
    
    public NoteDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"note\" (" + //
                "\"OBJECT_ID\" TEXT," + // 0: objectId
                "\"NOTE_ID\" INTEGER," + // 1: noteId
                "\"NOTE_AUTHOR\" TEXT NOT NULL ," + // 2: noteAuthor
                "\"NOTE_TITLE\" TEXT NOT NULL ," + // 3: noteTitle
                "\"NOTE_INFO\" TEXT NOT NULL ," + // 4: noteInfo
                "\"NOTE_TYPE\" INTEGER NOT NULL ," + // 5: noteType
                "\"EDIT_SITE\" TEXT," + // 6: editSite
                "\"UPDADE_AT\" INTEGER);"); // 7: updadeAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"note\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Note entity) {
        stmt.clearBindings();
 
        String objectId = entity.getObjectId();
        if (objectId != null) {
            stmt.bindString(1, objectId);
        }
 
        Integer noteId = entity.getNoteId();
        if (noteId != null) {
            stmt.bindLong(2, noteId);
        }
        stmt.bindString(3, entity.getNoteAuthor());
        stmt.bindString(4, entity.getNoteTitle());
        stmt.bindString(5, entity.getNoteInfo());
        stmt.bindLong(6, entity.getNoteType());
 
        String editSite = entity.getEditSite();
        if (editSite != null) {
            stmt.bindString(7, editSite);
        }
 
        java.util.Date updadeAt = entity.getUpdadeAt();
        if (updadeAt != null) {
            stmt.bindLong(8, updadeAt.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Note readEntity(Cursor cursor, int offset) {
        Note entity = new Note( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // objectId
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // noteId
            cursor.getString(offset + 2), // noteAuthor
            cursor.getString(offset + 3), // noteTitle
            cursor.getString(offset + 4), // noteInfo
            cursor.getInt(offset + 5), // noteType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // editSite
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // updadeAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Note entity, int offset) {
        entity.setObjectId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setNoteId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setNoteAuthor(cursor.getString(offset + 2));
        entity.setNoteTitle(cursor.getString(offset + 3));
        entity.setNoteInfo(cursor.getString(offset + 4));
        entity.setNoteType(cursor.getInt(offset + 5));
        entity.setEditSite(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdadeAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Note entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Note entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
